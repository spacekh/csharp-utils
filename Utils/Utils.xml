<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Utils</name>
    </assembly>
    <members>
        <member name="T:Utils.DataAccessLayer.DataLayer">
            <summary>
            Summary description for DataLayer
            </summary>
        </member>
        <member name="M:Utils.DataAccessLayer.DataLayer.#ctor(System.String)">
            <summary>
            Creates a new DataLayer object with the given SQL Connection String
            </summary>
            <param name="dbConnectionString">The connection string to use (usually the name of the database)</param>
        </member>
        <member name="M:Utils.DataAccessLayer.DataLayer.CreateParam(System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            Creates a new SqlParameter with the given name, type, and value
            </summary>
            <param name="paramName">The name of the SQL parameter</param>
            <param name="sqlDbType">The SqlDbType of the parameter</param>
            <param name="paramval">The value that the parameter should take in a SQL query</param>
            <returns>A new SqlParameter with the given attributes</returns>
        </member>
        <member name="M:Utils.DataAccessLayer.DataLayer.GetDataSet(System.String)">
            <summary>
            Returns the DataSet returned by the given stored procedure
            </summary>
            <param name="spName">The stored procedure to run</param>
            <returns>The DataSet returned by the given stored procedure, or null if an error occurs</returns>
        </member>
        <member name="M:Utils.DataAccessLayer.DataLayer.GetDataSet(System.String,System.Data.SqlClient.SqlParameter)">
            <summary>
            Returns the DataSet returned by the given stored procedure
            </summary>
            <param name="spName">The stored procedure to run</param>
            <param name="parameter">The parameter for this stored procedure</param>
            <returns>The DataSet returned by the given stored procedure, or null if an error occurs</returns>
        </member>
        <member name="M:Utils.DataAccessLayer.DataLayer.GetDataSet(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Returns the DataSet returned by the given stored procedure
            </summary>
            <param name="spName">The stored procedure to execute</param>
            <param name="parameters">The parameters for the given stored procedure</param>
            <returns>The DataSet returned by the given stored procedure, or null if an error occurs</returns>
        </member>
        <member name="M:Utils.DataAccessLayer.DataLayer.GetDataSet(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter})">
            <summary>
            Returns the DataSet returned by the given stored procedure
            </summary>
            <param name="spName">The stored procedure to run</param>
            <param name="parameters">The parameters for this stored procedure</param>
            <returns>The DataSet returned by the given stored procedure, or null if an error occurs</returns>
        </member>
        <member name="M:Utils.DataAccessLayer.DataLayer.GetDataSet(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns the DataSet returned by the given SqlCommand
            </summary>
            <param name="cmd">The SQL query to perform</param>
            <returns>The DataSet returned by the given SqlCommand.  If the DataSet includes a TABLE_NAMES table at the end, the tables will be named accordingly.</returns>
        </member>
        <member name="M:Utils.DataAccessLayer.DataLayer.ExecuteNonQuery(System.String)">
            <summary>
            Executes the given stored procedure
            </summary>
            <param name="spName">the stored procedure to execute</param>
            <returns>The number of rows affected, or -1 if it fails</returns>
        </member>
        <member name="M:Utils.DataAccessLayer.DataLayer.ExecuteNonQuery(System.Data.SqlClient.SqlCommand)">
            <summary>
            Executes the given SqlCommand against the database
            </summary>
            <param name="command">the SqlCommand to execute</param>
            <returns>The number of rows affected, or -1 if it fails</returns>
        </member>
        <member name="M:Utils.DataAccessLayer.DataLayer.ExecuteNonQuery(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter})">
            <summary>
            Executes a stored procedure that is not supposed to return any rows of data
            </summary>
            <param name="spName">the stored procedure to execute</param>
            <param name="parameters">the parameters to pass to the stored procedure</param>
            <returns>The number of rows affected; -1 if an error occurred</returns>
        </member>
        <member name="M:Utils.DataAccessLayer.DataLayer.ExecuteScalar(System.String,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter})">
            <summary>
            Executes a stored procedure that is only supposed to return a scalar value (not a table)
            </summary>
            <param name="spName">The stored procedure to execute</param>
            <param name="parameters">The list of parameters to pass to the SP</param>
            <returns>The value returned by the SP, or null if the SP execution fails.</returns>
        </member>
        <member name="M:Utils.DataAccessLayer.DataLayer.ExecuteScalar(System.Data.SqlClient.SqlCommand)">
            <summary>
            Executes a SqlCommand that is only supposed to return a scalar value (not a table)
            </summary>
            <param name="command">The command to execute</param>
            <returns>The value returned by the command, or null if the command execution fails.</returns>
        </member>
        <member name="T:Utils.OpenXmlService.ExcelDocument">
            <summary>
            A wrapper for <see cref="T:DocumentFormat.OpenXml.Packaging.SpreadsheetDocument"/> that provides multiple methods for easy creation, read/write, and interaction with the document
            </summary>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.#ctor">
            <summary>
            Initializes a new, empty Excel document for exporting. (Writes to a MemoryStream instead of a file)
            </summary>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.#ctor(System.String)">
            <summary>
            Initializes a new, empty Excel document to be written to the given file path.
            </summary>
            <param name="file">The (full or relative) file path to write the document to</param>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.Open(System.String)">
            <summary>
            Opens the given file in read/write mode
            </summary>
            <param name="file">The full filepath for the file to be opened</param>
            <returns>A fully initialized ExcelDocument object connected to the given file</returns>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.Init">
            <summary>
            Common initialization for ExcelDocument class
            </summary>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.AddDataTable(System.Data.DataTable)">
            <summary>
            Adds the information from the given DataTable into a new Sheet in the workbook
            </summary>
            <param name="data">The DataTable to serialize</param>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.AddDataTable(System.Data.DataTable,System.String[0:,0:])">
            <summary>
            Adds the information from the given DataTable into a new Sheet in the workbook, using the given column ids and alternate names as headers
            </summary>
            <param name="data">The DataTable to serialize</param>
            <param name="cols">The column headers to use.  If not null, only the specified columns, in the specified order, will be written.</param>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.AddDataTable(System.Data.DataTable,System.String[0:,0:],System.String)">
            <summary>
            Adds the information from the given DataTable into a new Sheet in the workbook, using the given column ids and alternate names as headers, and the given sheet name as the new Sheet's name
            </summary>
            <param name="data">The DataTable to serialize</param>
            <param name="cols">The column headers to use.  If not null, only the specified columns, in the specified order, will be written.</param>
            <param name="sheetName">The name to give to the Sheet</param>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.AddArray(System.String[][],System.String)">
            <summary>
            Adds the information from the given DataTable into a new Sheet in the workbook, using the given column ids and alternate names as headers, and the given sheet name as the new Sheet's name
            </summary>
            <param name="data">The String array to serialize</param>
            <param name="sheetName">The name to give to the Sheet</param>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.AddDataSet(System.Data.DataSet)">
            <summary>
            Adds all of the DataTables in the given DataSet as separate Sheets in the workbook
            </summary>
            <param name="ds">The DataSet to serialize</param>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.Insert(System.Int32,System.Int32,System.Object,DocumentFormat.OpenXml.Packaging.WorksheetPart)">
            <summary>
            Inserts the given object into the given (0-indexed) column of the given Row
            </summary>
            <param name="col">0-indexed column to add this value into</param>
            <param name="row">the 0-indexed row to add a cell into</param>
            <param name="o">the object to add to the given cell</param>
            <param name="wspart">the Worksheet to insert into</param>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.Insert(Utils.OpenXmlService.ExcelDocument.CellRef,System.Object,DocumentFormat.OpenXml.Packaging.WorksheetPart)">
            <summary>
            Inserts the given object into the given <see cref="T:Utils.OpenXmlService.ExcelDocument.CellRef"/> in the given <see cref="T:DocumentFormat.OpenXml.Packaging.WorksheetPart"/>
            </summary>
            <param name="cr"></param>
            <param name="o"></param>
            <param name="wspart"></param>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.InsertCellInWorksheet(System.String,System.UInt32,DocumentFormat.OpenXml.Packaging.WorksheetPart)">
            <summary>
            Given a column name and a row index, inserts a cell into the worksheet. 
            </summary>
            <param name="columnName">The column to insert into</param>
            <param name="rowIndex">The row to insert into</param>
            <param name="wspart">The Worksheet to insert into</param>
            <returns>Either the already-existing Cell at the given index, or a new Cell that has been inserted into the worksheet</returns>
            <remarks>Credits: https://docs.microsoft.com/en-us/office/open-xml/how-to-insert-text-into-a-cell-in-a-spreadsheet#code-snippet-9 </remarks>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.GetRange(System.String,Utils.OpenXmlService.ExcelDocument.CellRef,Utils.OpenXmlService.ExcelDocument.CellRef)">
            <summary>
            Returns a list of lists of strings corresponding to the cells that were found in the given range. If a worksheet called <paramref name="worksheetName"/> is not found, the first worksheet in the document is searched.
            </summary>
            <param name="worksheetName"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.PasteRange(System.String,Utils.OpenXmlService.ExcelDocument.CellRef,System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
            <summary>
            Performs a "Paste" action (overwriting existing cells) using the given "array" of strings, starting in the given cell
            </summary>
            <param name="worksheetName">The worksheet to paste into</param>
            <param name="start">A cell reference (eg F3)</param>
            <param name="values">The values to paste</param>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.CutRange(System.String,Utils.OpenXmlService.ExcelDocument.CellRef,Utils.OpenXmlService.ExcelDocument.CellRef)">
            <summary>
            Performs a "cut" action on the given range, returning the range cut
            </summary>
            <param name="worksheetName">The worksheet to cut from</param>
            <param name="start">The cell reference for the beginning of the cut range</param>
            <param name="end">The cell reference for the end of the cut range</param>
            <returns></returns>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.ColumnNameToNum(System.String)">
            <summary>
            Converts an Excel column name into a 0-indexed column number (A=0, Z=25, XFD=16383)
            </summary>
            <param name="columnName">The Excel column name (A,Z,XFD)</param>
            <returns>The 0-indexed column number that corresponds with this column name in Excel</returns>
            <remarks>Credits: http://stackoverflow.com/questions/667802/what-is-the-algorithm-to-convert-an-excel-column-letter-into-its-number </remarks>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.ColumnNumToName(System.Int32)">
            <summary>
            Gets the Excel column name from a 0-indexed column number (0=A; 16383=XFD)
            </summary>
            <param name="columnNumber">The 0-indexed column number to convert</param>
            <returns>The Excel column name corresponding with the given 0-indexed column number</returns>
            <remarks>Credits: http://stackoverflow.com/questions/181596/how-to-convert-a-column-number-eg-127-into-an-excel-column-eg-aa </remarks>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.GetCellValue(System.String,Utils.OpenXmlService.ExcelDocument.CellRef)">
            <summary>
            Gets a string representation of the information inside the given CellRef
            </summary>
            <param name="worksheetName">The worksheet to search</param>
            <param name="cellRef">The CellRef to check</param>
            <returns>The text inside the Cell</returns>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.GetCellValue(DocumentFormat.OpenXml.Spreadsheet.Cell)">
            <summary>
            Gets a string representation of the information inside the given Cell
            </summary>
            <param name="cell">The Cell to check</param>
            <returns>The text inside the Cell</returns>
        </member>
        <member name="T:Utils.OpenXmlService.ExcelDocument.CellRef">
            <summary>
            Class with implicit operators to/from string, which holds column and row values of an Excel cell reference
            </summary>
        </member>
        <member name="F:Utils.OpenXmlService.ExcelDocument.CellRef.col">
            <summary>
            The cell reference's column name
            </summary>
        </member>
        <member name="F:Utils.OpenXmlService.ExcelDocument.CellRef.row">
            <summary>
            The cell reference's row number
            </summary>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.CellRef.op_Implicit(Utils.OpenXmlService.ExcelDocument.CellRef)~System.String">
            <summary>
            Returns a formatted string indicating the column name and row number
            </summary>
            <param name="cellRef">The CellRef object to turn into a string</param>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.CellRef.op_Implicit(System.String)~Utils.OpenXmlService.ExcelDocument.CellRef">
            <summary>
            Creates a new CellRef object from a string that has a column name and row number
            </summary>
            <param name="s">The name of the cell, in string form</param>
        </member>
        <member name="T:Utils.OpenXmlService.ExcelDocument.Direction">
            <summary>
            Enum with Excel document directions (left,right,up,down)
            </summary>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.ScanToEnd(System.String,Utils.OpenXmlService.ExcelDocument.Direction)">
            <summary>
            Scans to the given <see cref="T:Utils.OpenXmlService.ExcelDocument.Direction"/> from the cell A1, stopping at the last non-empty cell it finds
            </summary>
            <param name="worksheetName">The name of the worksheet to scan.  If not found, the method will scan the first sheet in the workbook.</param>
            <param name="direction">The <see cref="T:Utils.OpenXmlService.ExcelDocument.Direction"/> in which to scan</param>
            <returns>The last non-empty cell in the given <see cref="T:Utils.OpenXmlService.ExcelDocument.Direction"/> from cell A1</returns>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.ScanToEnd(System.String,Utils.OpenXmlService.ExcelDocument.Direction,Utils.OpenXmlService.ExcelDocument.CellRef)">
            <summary>
            Scans to the given <see cref="T:Utils.OpenXmlService.ExcelDocument.Direction"/> from the given cell, stopping at the last non-empty cell it finds
            </summary>
            <param name="worksheetName">The name of the worksheet to scan.  If not found, the method will scan the first sheet in the workbook.</param>
            <param name="direction">The <see cref="T:Utils.OpenXmlService.ExcelDocument.Direction"/> in which to scan</param>
            <param name="start">The cell to start the scan from</param>
            <returns>The last non-empty cell in the given <see cref="T:Utils.OpenXmlService.ExcelDocument.Direction"/></returns>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.Scan(Utils.OpenXmlService.ExcelDocument.Direction,Utils.OpenXmlService.ExcelDocument.CellRef,System.Int32)">
            <summary>
            Returns the cell reference that is <paramref name="number"/> cells away from <paramref name="start"/> in the <see cref="T:Utils.OpenXmlService.ExcelDocument.Direction"/> indicated
            </summary>
            <param name="direction">The <see cref="T:Utils.OpenXmlService.ExcelDocument.Direction"/> to scan</param>
            <param name="start">The cell reference to start from</param>
            <param name="number">The number of cells to scan</param>
            <returns>A cell reference the indicated number of cells in the indicated <see cref="T:Utils.OpenXmlService.ExcelDocument.Direction"/> away from startCell (minimum A1)</returns>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.RowsBetween(Utils.OpenXmlService.ExcelDocument.CellRef,Utils.OpenXmlService.ExcelDocument.CellRef)">
            <summary>
            Returns the number of rows between the two given cell references
            </summary>
            <param name="startCell">The cell reference to use as the start</param>
            <param name="endCell">The cell reference to use as the end</param>
            <returns>The number of rows between the two given cell references</returns>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.ColsBetween(Utils.OpenXmlService.ExcelDocument.CellRef,Utils.OpenXmlService.ExcelDocument.CellRef)">
            <summary>
            Returns the number of columns between the two given cell references
            </summary>
            <param name="startCell">The cell reference to use as the start</param>
            <param name="endCell">The cell reference to use as the end</param>
            <returns>The number of columns between the two given cell references</returns>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.Save">
            <summary>
            Saves the current document but leaves it open
            </summary>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.SaveAndClose">
            <summary>
            Saves and closes the current document
            </summary>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.GetStream">
            <summary>
            Saves and closes the current document, then gets a <see cref="T:System.IO.MemoryStream"/> for exporting.
            </summary>
            <returns><see cref="T:System.IO.MemoryStream"/></returns>
        </member>
        <member name="M:Utils.OpenXmlService.ExcelDocument.SaveAs(System.String)">
            <summary>
            Saves the current document with a new name, and returns the new document
            </summary>
            <param name="filename">The name of the desired new document</param>
        </member>
    </members>
</doc>
